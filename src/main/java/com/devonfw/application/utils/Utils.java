package com.devonfw.application.utils;

import com.opencsv.CSVParser;
import com.opencsv.CSVParserBuilder;
import com.opencsv.CSVReader;
import com.opencsv.CSVReaderBuilder;
import org.apache.commons.io.FileUtils;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * Supporting methods for processing the data and generating the decision support
 */
public class Utils {

    /**
     * Parses the CSV file generated by MTA in the first step, filters it and converts it to a list
     * @param resultPath Path to the directory where the results will be saved
     * @return List with incompatible dependencies
     */
    public static List<List<String>> parseCSV(String resultPath) {

        Path csvFile = new File(resultPath + "\\AllIssues.csv").toPath();
        List<List<String>> records = new ArrayList<>();

        try {
            //Configure CSV parser
            Reader reader = Files.newBufferedReader(csvFile);

            CSVParser parser = new CSVParserBuilder()
                    .withSeparator(',')
                    .withIgnoreQuotations(true)
                    .build();

            CSVReader csvReader = new CSVReaderBuilder(reader)
                    .withSkipLines(1)
                    .withCSVParser(parser)
                    .build();

            //Save mandatory issues of csv file in list
            String[] values;
            while ((values = csvReader.readNext()) != null) {
                if(Arrays.asList(values).contains("mandatory")) {
                    records.add(Arrays.asList(values));
                    System.out.println(Arrays.toString(values));
                }
            }

            //Delete MTA files
            FileUtils.cleanDirectory(new File(resultPath));

        } catch (IOException e) {
            e.printStackTrace();
        }

        return records;
    }

    /**
     * Create directory for results
     * @return Path to directory
     */
    public static String createDirectoryForResults() {

        Instant instant = Instant.now();
        long timeStampMillis = instant.toEpochMilli();
        String resultPath = System.getProperty("user.dir") + "\\results\\" + timeStampMillis;
        boolean mkdir = new File(resultPath).mkdirs();
        return resultPath;
    }

}
